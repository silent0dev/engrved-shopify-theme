<!-- PRODUCT FORM EGU SHINEON 0.5.1 -->
<!-- DO NOT MODIFY THIS FILE -->

{% assign iso_639_1 = shop_locale.iso_code | slice: 0,2 %}

{% assign display_option1_metal = false %}
{% assign display_option2 = false %}
{% assign display_option3 = false %}

{% assign featured_engraved_img = false %}
{% assign featured_gold_img = false %}

{% assign variant_gold = false %}
{% assign variant_gold_engraved = false %}
{% assign variant_stainless = false %}
{% assign variant_stainless_engraved = false %}

{% comment %} GET ENGRAVED AND GOLD FEATURE IMAGES {% endcomment %}
{% for variant in product.variants %}
  {% if variant.metafields.shineon.engravable == 1 and featured_engraved_img == false %}
  {% assign featured_engraved_img = variant.featured_image %}
  {% endif %}
  {% if variant.metafields.shineon.engravable == 1 and variant.metafields.shineon.gold == 1 and featured_gold_img == false %}
  {% assign featured_gold_img = variant.featured_image %}
  {% endif %}
  {% if variant_gold == false and variant.metafields.shineon.gold == 1 and variant.metafields.shineon.engravable == 0 %}
  {% assign variant_gold = variant %}
  {% endif %}
  {% if variant_gold_engraved == false and variant.metafields.shineon.gold == 1 and variant.metafields.shineon.engravable == 1 %}
  {% assign variant_gold_engraved = variant %}
  {% endif %}
  {% if variant_stainless == false and variant.metafields.shineon.gold == 0 and variant.metafields.shineon.engravable == 0 %}
  {% assign variant_stainless = variant %}
  {% endif %}
  {% if variant_stainless_engraved == false and variant.metafields.shineon.gold == 0 and variant.metafields.shineon.engravable == 1 %}
  {% assign variant_stainless_engraved = variant %}
  {% endif %}
{% endfor %}

{% assign upsell_engraving_price = variant_stainless_engraved.price | minus: variant_stainless.price %}
{% assign upsell_gold_price = variant_gold.price | minus: variant_stainless.price %}

{% if section.settings.modal_engraving_savings_percentage > 0 %}
  {% assign decimal = section.settings.modal_engraving_savings_percentage | divided_by: 100.0 %}
  {% assign divisor = 1.0 | minus: decimal %}
  {% assign upsell_engraving_original_price = upsell_engraving_price | divided_by: divisor %}
{% else %}
  {% assign upsell_engraving_original_price = upsell_engraving_price %}
{% endif %}
{% if section.settings.modal_gold_savings_percentage > 0 %}
  {% assign decimal = section.settings.modal_gold_savings_percentage | divided_by: 100.0 %}
  {% assign divisor = 1.0 | minus: decimal %}
  {% assign upsell_gold_original_price = upsell_gold_price | divided_by: divisor %}
{% else %}
  {% assign upsell_gold_original_price = upsell_gold_price %}
{% endif %}

{% comment %} FAILOVER TO DEFAULT FEATURED IMAGE {% endcomment %}
{% if featured_engraved_img == false %}
  {% assign featured_engraved_img = featured_img %}
{% endif %}
{% if featured_gold_img == false %}
  {% assign featured_gold_img = featured_img %}
{% endif %}

{% if product.options.size >= 1 and option1_list.size > 1 and one_style != 1 %}
  {% if has_multiple_metals == true %}
  {% assign display_option1_metal = true %}
  {% endif %}
{% elsif one_style == 1 and has_multiple_metals == true %}
  {% assign display_option1_metal = true %}
{% endif %}

{% if product.options.size >= 2 and option2_list.size > 1 %}
  {% assign display_option2 = true %}
{% endif %}

{% if product.options.size == 3 and option3_list.size > 1 %}
  {% assign display_option3 = true %}
{% endif %}


{% if section.settings.modal_red_color != Nil %}
<style>.so-modal-red { color: {{ section.settings.modal_red_color }} }</style>
{% endif %}

<div class="so-product-form-wrap">

  <div id="{{ product_form_id }}-wrap" class="so-product-form">
  {% comment %} BEGIN: DISPLAY PLACEHOLDER FORM {% endcomment %}

  {% include 'product-info-shineon' with 'product-title-with-rating' %}

  {% if section.settings.product_usps != '' and section.settings.product_usps != null %}
  <div class="so-usps-w so-hidden-sm">
    {% include 'badges-shineon' with 'product-usps' %}
  </div>
  {% endif %}

  <!-- {% increment option_number %} -->

  <div id="product-form-options-wrap" {% if product.metafields.shineon.uploadable == 1 %}class="so-hidden"{% endif %}>

    <div class="so-product-variants-wrap">
    
      {% if display_option1_metal %}
      <div class="so-field-wrap so-option1 so-option1-metal">

        {% if has_multiple_metals == true %}
        <label for="so-option1-input-value" class="so-option-label so-option-label-metal">
          {% if section.settings.copy_option_numbers and option1_list.size > 1 %}
            <span class="so-option-number"
              style="background-color: {{ section.settings.primary_color }};">
              {% increment option_number %}
            </span>
          {% endif %}
          {{ 'purchase_form_copy_option1_metal_label' | t }}
        </label>

        <div class="so-option-fieldset so-swatch-picker so-swatch-metal-picker">

          {% for variant in product.variants %}
            {% assign out_of_stock = false %}
            {% if variant.available == false and variant.inventory_management != null %}
              {% assign out_of_stock = true %}
            {% endif %}

            {% if variant.metafields.shineon.engravings == 0 %}

            <div class="so-label-cell-pad so-variant-change so-variant-change-metal so-variant-change-metal-{{ variant.metafields.shineon.metal }}{% if out_of_stock == true %} out-of-stock{% endif %}"
               data-metal="{{ variant.metafields.shineon.metal }}"
               data-variant_id="{{ variant.id }}">
              <label class="so-swatch">
                <div class="so-label-symbol-wrap">
                  <span class="so-swatch-metal so-swatch-metal-{{ variant.metafields.shineon.metal }}"></span>
                  {% assign metal_label = 'purchase_form_copy_option1_metal_' | append: variant.metafields.shineon.metal | append: '_label' %}
                  <span class="so-translation">{{ metal_label | t }}</span>
                  {% if out_of_stock == true %}<i class="notification">{{ 'purchase_form_out_of_stock' | t }}</i>{% endif %}
                </div>
              </label>
            </div>

            {% endif %}

          {% endfor %}

        </div>

        {% endif %}

      </div><!-- END so-field-wrap so-option1 so-option1-metal -->
      {% endif %}

      {% if so_current_variant.metafields.shineon.generated_properties.size > 0 %}
        <!-- If has generated properties in metafields -->
        {% assign inputs = so_current_variant.metafields.shineon.generated_properties.inputs %}
        {% assign engraved = false %}
        {% assign ring_size = false %}
        {% assign birthstone = false %}
        {% for input in inputs %}
          {% if input.field_type == "engraving" and input.required == 1 %}
            {% assign engraved = true %}
          {% endif %}
          {% if input.field_type == "ring_size" %}
            {% assign ring_size = true %}
          {% endif %}
          {% if input.field_type == "birthstone" %}
            {% assign birthstone = true %}
          {% endif %}
        {% endfor %}
        {% if engraved == true or ring_size or birthstone %}
          <div class="so-custom-fields-wrap">
            {% for input in inputs %}
              {% assign required = "" %}
              {% if input.required == 1 %}
                {% assign required = "required" %}
              {% endif %}
              {% assign input_label = input.label %}
              {% assign input_placeholder = input.placeholder %}
              {% for locale in input.locales %}
                {% if shop.locale contains locale[0] %}
                  {% assign input_label = locale[1].label %}
                  {% assign input_placeholder = locale[1].placeholder %}
                {% endif %}
              {% endfor %}
              {% if input.field_type == "ring_size" %}
                <div class="so-custom-field-wrap {{ input.grid }}">
                  <label for="{{ input.id }}">{{ input_label }}</label>
                  <select name="properties[{{ input.name }}]" id="{{ input.id }}" class="{{ input.class }}" {{ required }}>
                    <option selected disabled>{{ input_placeholder }}</option>
                    {% for option in input.options %}
                      <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                  </select>
                </div>
              {% elsif input.field_type == "birthstone" %}
                <div class="so-custom-field-wrap">
                  <label class="so-option-label">{{ input.label }}</label>
                  <div class="so-custom-field-birthstone-wrap">
                    {% for option in input.options %}
                      <label for="so-custom-field-radio-{{ option }}" class="so-custom-field-birthstone-label">
                        <input
                            id="so-custom-field-radio-{{ option }}"
                            class="{{ input.class }}"
                            type="radio"
                            name="properties[{{ input.name }}]"
                            value="{{ option }}"
                            data-src-bigimg="https://cdn.shopify.com/s/files/1/0077/2420/4096/files/bs-{{ option }}_x100.png"
                            {{ required }}
                             />
                        {% if section.settings.birthstone_style_selector != "no-stones" %}
                          <div class="so-custom-field-birthstone-circle {{ option }}"></div>
                        {% endif %}
                        {% if section.settings.birthstone_style_selector != "no-months" %}
                          {{ option | truncate: 3, "" }}
                        {% endif %}
                      </label>
                    {% endfor %}
                    <div id="big-img-w" style="display: none; min-height: 100px;">
                      <img src="" id="big-img">
                    </div>
                  </div>
                </div>
              {% elsif input.field_type == 'engraving' %}
                <div class="so-custom-field-wrap {{ input.grid }}">
                  <label for="{{ input.id }}">{{ input_label }}</label>
                  <input
                      type="{{ input.type }}"
                      name="properties[{{ input.name }}]"
                      id="{{ input.id }}"
                      class="{{ input.class }}"
                      placeholder="{{ input_placeholder }}"
                      maxlength="{{ input.maxlength }}"
                      minlength="{{ input.minlength }}"
                      form="{{ product_form_id }}"
                      {{ required }} />
                </div>
              {% endif %}
            {% endfor %}
          </div>
        {% endif %}
      {% endif %}

      {{ section.settings.snippet_below_options }}

    </div><!-- END so-product-variants-wrap -->

    {% include 'product-info-shineon' with 'so-product-price' %}

    {% comment %}
    Display coupon discount
    {% endcomment %}
    {% capture snippet_content %}{% include 'shineon-above-atc' %}{% endcapture %}
    {% unless snippet_content contains "Liquid error" %}
      {{ snippet_content }}
    {% endunless %}

    {% include 'product-info-shineon' with 'button-atc' %}

    {% if section.settings.payment_options %}
    <div class="below-atc">
    {% include 'product-info-shineon' with 'payment-icons' %}
    </div>
    {% endif %}

    {% unless shop.permanent_domain contains 'shineon-platform' %}
      {% if product.available == true %}
      {% include 'product-informations-alert-shineon' with section_type: 'discount-message' %}
      {% endif %}
    {% endunless %}

    {% capture snippet_content %}{% include 'shineon-below-atc' %}{% endcapture %}
    {% unless snippet_content contains "Liquid error" %}
      {{ snippet_content }}
    {% endunless %}

  </div><!-- END product-form-options-wrap -->

  {{ section.settings.snippet_below_atc }}

  {% if section.settings.informations_alert_enable == true %}
  <div class="text-center">
    {% include 'product-informations-alert-shineon' with almost_gone_max_value: section.settings.almost_gone_max_value, almost_gone_interval: section.settings.almost_gone_interval, section_type: 'hurry_up' %}
  </div>
  {% endif %}

  {% if section.settings.show_badges_as_section != false and section.settings.show_about_us_review_list != true and section.settings.trust_section_type == 'single_image' %}
    {% include 'badges-shineon' with 'trust-single-image' %}
  {% endif %}

  {% if section.settings.product_usps != '' and section.settings.product_usps != null %}
  <div class="so-usps-w so-hidden-md">
    {% include 'badges-shineon' with 'product-usps' %}
  </div>
  {% endif %}

  {% if section.settings.show_about_us_review_list != true %}
    <div id="so-product-payment-and-description" {% if product.metafields.shineon.uploadable == 1 %}class="so-hidden"{% endif %}>

      {% include 'product-info-shineon' with 'description' %}

    </div><!-- END so-product-payment-and-description -->
  {% endif %}
      
  {% comment %} END: DISPLAY PLACEHOLDER FORM {% endcomment %}

  {% assign so_modal_upsell_text_heading = 'purchase_form_modal_callout_engraving_primary' | t %}
  
  {% if so_current_variant.metafields.shineon.gold == 1 %}
    {% assign so_modal_product_featured_img = featured_gold_img.src | img_url: 'x495' %}
  {% else %}
    {% assign so_modal_product_featured_img = featured_engraved_img.src | img_url: 'x495' %}
  {% endif %}

  {% include 'product-info-shineon' with 'upsell-modal' %}

  </div><!-- END so-product-form -->

</div><!-- END so-product-form-wrap -->

<script>
  document.addEventListener("DOMContentLoaded", function(event) {
  jQuery( document ).ready(function($) {
    if (typeof $ === 'undefined') {
    alert("jQuery is required for ShineOn Engraving Product Templates. Please Install jQuery.");
    return;
    }

    if (!Array.prototype.diff) {
    Object.defineProperty(Array.prototype, 'diff', {
      enumerable: false, // default is false
      value: function (a) {
      return this.filter(function (i) {
        return a.indexOf(i) < 0;
      });
      }
    });
    }

    $('body').addClass('body-{% if product.template_suffix != null %}{{ product.template_suffix }}{% else %}product{% endif %}');

    var $wrap = $('#so-options-form'),
      $form = $('#{{ product_form_id }}'),
      $modal = $('#modal-{{ product_form_id }}');

    $('#so-btn-add-to-cart-{{ product.id }}').off('click').on('click', function(e){
    e.stopImmediatePropagation();
    e.preventDefault();
    $modal.so_modal('show');
    });

    $modal.insertAfter($('div.page-container').length ? 'div.page-container' : 'body');

    var initForm = function () {
    var product = {
      base_variant: {{ base_variant | json }},
      current_variant: null,
      $form: $form,
      settings: {
      section: {{ section.settings | json }},
      engraving: {
        option: {{ engraving_option | json }},
        option_index: {{ engraving_option_index | json }},
        option_yes: '{{ engraving_option_yes }}',
        option_no: '{{ engraving_option_no }}'
      }
      },
      getVariant: function (variant_id) {
      for (var i = 0, len = this.variants.length, variant = undefined; i < len; i++) {
        if (this.variants[i].id == variant_id) {
        variant = this.variants[i];
        break;
        }
      }

      return variant;
      },
      getVariantsMatching: function (obj, metafield_obj) {
      var variants = [], key;
      VariantsLoop: for (var i = 0; i < this.variants.length; i++) {
        for (key in obj) {
        if (!obj.hasOwnProperty(key) || obj[key] !== this.variants[i][key]) {
          continue VariantsLoop;
        }
        }

        if (typeof metafield_obj !== 'undefined') {
        for (key in metafield_obj) {
          if (!metafield_obj.hasOwnProperty(key) || metafield_obj[key] !== this.variants[i].metafields[key]) {
          continue VariantsLoop;
          }
        }
        }

        // All options match? Cool, we found it.
        variants.push(this.variants[i]);
      }

      return variants;
      },
      getRespectiveEngravingVariant: function (state) {
      // Are we looking for the engraved version or non-engraved version?
      if (typeof state === 'undefined') {
        state = true;
      }

      if (this.currentVariantHasEngraving() && state) {
        return this.current_variant;
      } else if (!this.currentVariantHasEngraving() && !state) {
        return this.current_variant;
      }

      var match_options = ['option1', 'option2', 'option3'].diff([this.settings.engraving.option]);

      for (var i = 0, variant = undefined; i < this.variants.length; i++) {
        // Skip the current
        if (this.current_variant.id == this.variants[i].id) {
        continue;
        }

        // Check if all options match
        var assertion = state;
        for (j = 0; j < match_options.length; j++) {
        var match_option = match_options[j];
        if (this.current_variant[match_option] != this.variants[i][match_option]) {
          assertion = !state;
          break;
        }
        }

        // All options match? Cool, we found it.
        if (assertion == state) {
        variant = this.variants[i];
        break;
        }
      }

      // If nothing is found, stay on the current variant
      return variant || this.current_variant;
      },
      currentVariantHasEngraving: function () {
      return this.current_variant[this.settings.engraving.option] === this.settings.engraving.option_yes;
      },
      changeVariant: function (variant) {
      if (typeof variant !== 'object') {
        variant = this.getVariant(variant);
      }

      this.current_variant = variant;

      this.$form.trigger('variant_changed', [this, this.current_variant]);

      // long variant names or more than 2 options
      var $options1 = $wrap.find('.so-swatch-picker > div:not(.so-hidden,.so-inactive-metal)'),
          hasOverFlowingElements = false;
      $options1.each(function (k, el) {
        var soLabelSymbolWrap = $(el).find('.so-label-symbol-wrap'),
            isLabelTextLarger = false;
        if (soLabelSymbolWrap.length > 0)
        {
          if (soLabelSymbolWrap.innerWidth() < soLabelSymbolWrap[0].scrollWidth)
          {
            isLabelTextLarger = true;
          }
        }
        if ((el.offsetWidth === 0 && el.innerText.trim().length > 25) || el.offsetWidth < el.scrollWidth|| isLabelTextLarger) {
          hasOverFlowingElements = true;
        }
      });
      if ($options1.length > 2 || hasOverFlowingElements === true) {
        $options1.removeClass(function (index, className) {
          return (className.match(/(^|\s)so-col-\S+/g) || []).join(' ');
        }).addClass('so-col-12 text-overflowed');
      }

      return this;
      },
      remember: function () {
      var $line1_input = this.$form.find('input.so-engraving-line1'),
        $line2_input = this.$form('input.so-engraving-line2');

      $line1_input.data('old', $line1_input.val());
      $line2_input.data('old', $line2_input.val());
      $line1_input.val('');
      $line2_input.val('');
      },
      refill: function () {
      var $line1_input = this.$form.find('input.so-engraving-line1'),
        $line2_input = this.$form.find('input.so-engraving-line2');

      if ($line1_input.val().length === 0 && $line1_input.data('old')) {
        $line1_input.val($line1_input.data('old'));
      }

      if ($line2_input.val().length === 0 && $line2_input.data('old')) {
        $line2_input.val($line2_input.data('old'));
      }
      },
      displayEngravingFields: function (state) {
      // When Yes / No hidden, Inputs always show.
      if (this.settings.section.option2_selection === 'show_inputs_only') {
        return;
      }

      this.$form.find('.so-engraving-lines').toggle(state);
      this.$form.find('.so-engraving-line1-wrap').prop('required', state);
      },
      formatMoney: function (cents, format) {
      if (typeof cents === 'string') {
       cents = cents.replace('.', '');
      }
      var value = '',
        placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
        formatString = format || {{ shop.money_format | json }};

      function formatWithDelimiters(number, precision, thousands, decimal) {
        thousands = thousands || ',';
        decimal = decimal || '.';

        if (isNaN(number) || number === null) {
        return 0;
        }

        number = (number / 100.0).toFixed(precision);

        var parts = number.split('.');
        var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
        var centsAmount = parts[1] ? decimal + parts[1] : '';

        return dollarsAmount + centsAmount;
      }

      switch (formatString.match(placeholderRegex)[1]) {
        case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
        case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
        case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
        case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
        case 'amount_no_decimals_with_space_separator':
        value = formatWithDelimiters(cents, 0, ' ');
        break;
      }

      return formatString.replace(placeholderRegex, value);
      }
    };

    $.extend(product, {{ product | json }});

    product.variants = [];

    // Filter out hidden variants (if any)
    {% for variant in product.variants %}
      {% unless hidden_variants contains variant.id %}
      // Add metafield info
      var variant = {{ variant | json }};
      variant.metafields = {{ variant.metafields.shineon | json }};
      if (variant.metafields.transformations) {
        variant.metafields.transformations = JSON.parse({{ variant.metafields.shineon.transformations | json }});
      }
      if (variant.metafields.engravable_fonts) {
        variant.metafields.engravable_fonts = JSON.parse({{ variant.metafields.shineon.engravable_fonts | json }});
      }
      product.variants.push(variant);
      {% endunless %}
    {% endfor %}

    $.extend(product, {
      has_silver_variants: {{ has_silver_variants | json }},
      has_gold_variants: {{ has_gold_variants | json }},
      has_multiple_metals: {{ has_multiple_metals | json }},
      metafields: {{ product.metafields.shineon | json }},
      template_suffix: '{{ template.suffix }}',
      base_variant: {{ base_variant | json }}
    });
    product.current_variant = product.getVariant({{ so_current_variant.id }}) || product.variants[0];

    // if Variant AVAILABLE or OUT OF STOCK
    {% if so_current_variant.available == false %}
      product.current_variant = product.getVariant({{ product.first_available_variant.id }}) || product.variants[0];
    {% else %}
      product.current_variant = product.getVariant({{ so_current_variant.id }}) || product.variants[0];
    {% endif %}

    {% if use_shineon_cart and shop.metafields.shineon.google_analytics_id %}
      shineon.analytics.ga.send_event.view_item({
        ga_account_id: '{{ shop.metafields.shineon.google_analytics_id }}',
        product: product
      });
    {% endif %}

    // Modal Events
    $modal.on('click', '.so-modal-btn-add-base-to-cart', function() {
      if(product.current_variant.metafields.metal == 'gold')
      {
      var switch_gold_not_engraved = {{ variant_gold | json }};
      if (switch_gold_not_engraved) {
        var current_variant = switch_gold_not_engraved.id;
      }
      }
      else
      {
      var switch_stainless_not_engraved = {{ variant_stainless | json }};
      if (switch_stainless_not_engraved) {
        var current_variant = switch_stainless_not_engraved.id;
      }
      }
      product.changeVariant(current_variant);
      $form.submit();
    });

    $modal.on('hide.bs.so-modal', function (e) {
      $('#so-gallery-wrap').show();
      if(product.current_variant.metafields.metal == 'gold')
      {
      var switch_gold_not_engraved = {{ variant_gold | json }};
      if (switch_gold_not_engraved) {
        var current_variant = switch_gold_not_engraved.id;
      }
      }
      else
      {
      var switch_stainless_not_engraved = {{ variant_stainless | json }};
      if (switch_stainless_not_engraved) {
        var current_variant = switch_stainless_not_engraved.id;
      }
      }
      product.changeVariant(current_variant);
      $form.submit();
    });

    $modal.on('show.bs.so-modal', function (e) {
      //$('#so-gallery-wrap').hide();
      product.changeVariant(product.current_variant.id);
    });

    // DOM Events
    $('.so-custom-field-birthstone-label').click(function (e) {
      $('.so-custom-field-birthstone-label').removeClass('so-custom-field-birthstone-selected');
      $(e.currentTarget).addClass('so-custom-field-birthstone-selected');
    });

    $('.so-tabs').off('click', 'li a')
      .on('click', 'li a', function () {
        if (!$(this).parents('li').hasClass('so-active'))
        {
          var $anchor = $(this),
            $tab = $anchor.parents('li').first(),
            $tabs = $tab.parent().children('li'),
            panel = $anchor.data('panel'),
            $panel = $('#' + panel),
            $panels = $panel.parent().children('li');

          $tabs.filter('.so-active').removeClass('so-active');
          $tab.addClass('so-active');

          $panels.filter(':visible').hide();
          $panel.show();
        }

        // Prevent the href.
        return false;
      });

    // IMPORTANT, the so-engraving-input class can be in a metafield
    $form.off('input', '.so-engraving-input')
      .on('input', '.so-engraving-input', function () {
      var $inputs = $('.so-engraving-input'),
        engraving_length = $inputs.get().reduce(function (carry, next) {
          return carry + $(next).val().length;
        }, 0);

      if (engraving_length) {
        if (!product.currentVariantHasEngraving()) {
        product.changeVariant(product.getRespectiveEngravingVariant());
        $inputs.addClass('so-engraving-active');
        }
      } else {
        if (product.currentVariantHasEngraving()) {
        product.changeVariant(product.getRespectiveEngravingVariant(false));
        $inputs.removeClass('so-engraving-active');
        }
      }
      });

    $wrap.off('click', '.so-variant-change-metal:not(.out-of-stock)')
      .on('click', '.so-variant-change-metal:not(.out-of-stock)', function () {
      var $this = $(this),
        metal = $this.data('metal').toLowerCase(),
        gold = ['silver', 'stainless'].indexOf(metal) === -1 ? 1 : 0,
        $metalChangeBtns = $('.so-variant-change-metal'),
        $variants = $form.find('[data-variant_id][data-metal]'),
        variants;

      variants = product.getVariantsMatching({
        option2: product.current_variant.option2,
        option3: product.current_variant.option3
      }, {
        metal: metal,
        type: product.current_variant.metafields.type
      });

      if (variants.length !== 1) {
        // fallback v0.1.1
        // using attachment metafield instead
        var attachment = product.current_variant.metafields.attachment.match(/-silver$/)
          ? product.current_variant.metafields.attachment.replace('silver', 'gold')
          : product.current_variant.metafields.attachment.replace('gold', 'silver');

        variants = product.getVariantsMatching({
          option2: product.current_variant.option2,
          option3: product.current_variant.option3
        }, {
          attachment: attachment
        });
      }

      if (variants.length === 0) {
        console.error('No variants found ', metal);
        return;
      } else if (variants.length > 1) {
        console.error('matched more than 1 variant', variants);
        return;
      }

      // Hide/Show
      $metalChangeBtns.removeClass('so-active-metal');
      $this.addClass('so-active-metal');
      $variants.filter('[data-metal != "' + metal + '"][data-gold != "' + gold + '"]').addClass('so-inactive-metal');
      $variants.filter('[data-metal = "' + metal + '"][data-gold = "' + gold + '"]').removeClass('so-inactive-metal');

      product.changeVariant(variants[0].id);

      if(gold)
      {
        $('.so-modal-product-featured-img').attr('src', '{{ featured_gold_img | img_url: "x495" }}');
      }
      else
      {
        $('.so-modal-product-featured-img').attr('src', '{{ featured_engraved_img | img_url: "x495" }}');
      }
      });

    // Handle changing hidden variant id input when swatch labels are clicked
    $form.off('click', '.so-variant-change')
      .on('click', '.so-variant-change', function () {
      product.changeVariant($(this).data('variant_id'));
      });

    $form.off('input change', 'select.so-variant-selector')
      .on('input change', 'select.so-variant-selector', function () {
      product.changeVariant($(this).val());
      });

    $wrap.off('click', '.so-quantity-change').on('click', '.so-quantity-change', function () {
      var $input = $form.find('input[name=quantity]'),
        $vanity = $wrap.find('input.so-cart-qty-input'),
        value = parseInt($input.val());

      if ($(this).data('quantity') === 'minus') {
      if (value > 1) {
        $input.val(value - 1);
      }
      } else {
      $input.val(value + 1);
      }

      $vanity.val($input.val());

      $form.trigger('quantity_changed');
    });

    var last_input_so_cart_qty_value;

    $form.find('input.so-cart-qty-input')
      .off('input').on('input', function () {
      if (this.value > 0) {
        $form.trigger('quantity_changed');
      }
      })
      .off('blur').on('blur', function(){
      if (this.value <= 0){
        // invalid value
        this.value = last_input_so_cart_qty_value;
      }
      });

    $form.off('so-product-set-current-variant').on('so-product-set-current-variant', function () {
      product.changeVariant(product.current_variant);
    });

    $form.off('quantity_changed.atc_text variant_changed.atc_text')
      .on('quantity_changed.atc_text variant_changed.atc_text', function () {
      var $preATC = $wrap.find('.so-btn-add-to-cart-vanity-prefix'),
        $sufATC = $wrap.find('.so-btn-add-to-cart-vanity-suffix'),
        price = product.current_variant.price,
        quantity = parseInt($form.find('input[name=quantity]').val());

        last_input_so_cart_qty_value = quantity;

      $wrap.find('.so-btn-add-to-cart-vanity-copy').html('{{ 'purchase_form_add_to_cart_text' | t }}'+'&nbsp;');

      if ($preATC.length) {
        $preATC.html(product.formatMoney(price * quantity) + ' -&nbsp;');
      }

      if ($sufATC.length) {
        var label = quantity === 1 ? $sufATC.data('singular') : $sufATC.data('plural');
        $sufATC.text(' (' + quantity + ' ' + label + ')');
      }

      return true;
      });

    // The current_variant changed on the product object.
    $form.off('variant_changed.form')
      .on('variant_changed.form', function (e, p, v) {
      var $input = $form.find('input[name=id]'),
        $formTemplate = $('#so-options-form'),
        $compare_at = $formTemplate.find('.so-compare-at-label'),
        $compare_at_savings = $formTemplate.find('.so-compare-at-savings-label-money'),
        $price = $formTemplate.find('.so-product-pricing span.money'),
        $priceSaveMoney = $formTemplate.find('.saved-amount-money'),
        $priceSavePercent = $formTemplate.find('.saved-amount-percent');

      // engraving fields
      p.displayEngravingFields(p.currentVariantHasEngraving());

      // price
      $price.html(product.formatMoney(v.price));
      $priceSaveMoney.html(product.formatMoney(v.compare_at_price - v.price));
      $priceSavePercent.html(Math.round(((v.compare_at_price - v.price)/v.compare_at_price)*100));
      $compare_at.html(product.formatMoney(v.compare_at_price));
      $compare_at_savings.html(product.formatMoney(v.compare_at_price - v.price));

      // Make the select variant active and visible in every fieldset
      $input.val(v.id);
      $wrap.find('.so-variant-change.so-active').removeClass('so-active');
      $wrap.find('.so-variant-change[data-variant_id=' + v.id + ']').addClass('so-active').removeClass('so-hidden');

      $form.find('input[name=id]').trigger('input');

      // update variant id on query string
      if (window.history && window.history.pushState) {
        var key = 'variant',
          value = v.id,
          re = new RegExp("([?&])" + key + "=.*?(&|#|$)", "i"),
          newurl;
        if (window.location.href.match(re)) {
        newurl = window.location.href.replace(re, '$1' + key + "=" + value + '$2');
        } else {
        var separator = window.location.href.indexOf('?') !== -1 ? "&" : "?";
        newurl = window.location.href + separator + key + "=" + value;
        }
        window.history.pushState({path: newurl}, '', newurl);
      }

      return true;
      });

    if ($form.data('uploadable') !== 1) {
      // edge case: current_variant has engraving, if buyer doesn't
      // enter any engraving text, he will make an engraving order without engraving text
      $form.find('.so-engraving-input:first').trigger('input');
      // Trigger form change on load to set any additional state.
      $form.trigger('variant_changed', [product, product.current_variant]);
    }

    // Continue Without Customization link in the modal submits the form
    $('.so-btn-add-base-to-cart')
      .off('click')
      .on('click', function() {
      product.changeVariant(product.variants[0].id);
      $form.submit();
      });

    /**
     * Form Submit Event Handlers
     */

    // Toggle engraving fields
    $form.off('submit').on('submit', function () {
      $form.find('.so-engraving-line1-wrap input, .so-engraving-line2-wrap input')
      .prop('disabled', !product.currentVariantHasEngraving());
      $form.find('.so-engraving-input').prop('disabled', !product.currentVariantHasEngraving());
    });

    var formSubmitDefs = []; // deffereds array

    $form.on('shineon/add_submit_deferred', function(evt, promise){
      formSubmitDefs.push(promise);
    });

    {% include 'product-shineon-scripts' with 'analytics-events-form-submit-listeners' %}

    if (
      $form.data('uploadable') !== 1 &&
      ($form.data('use_shineon_cart_page_eng') === true || $form.data('express_checkout') === true )
    ) {
      var def_cart_with_ajax = new $.Deferred();
      formSubmitDefs.push(def_cart_with_ajax.promise());

      $form.one('submit', function () {
      $.ajax({
        type: 'POST',
        url: '/cart/add.js',
        dataType: 'json',
        data: $form.serialize()
      })
      .done(function () {
        $form.data('submitted_with_ajax', 1);
        def_cart_with_ajax.resolve({df_form_submit_non_bu: true});
      })
      .fail(function (jqxhr) {
        console.error(jqxhr);
        def_cart_with_ajax.reject(jqxhr);
      });

      return false;
      });
    }

    // Form Submit Event Listeners Deferreds
    // Force that all of them complete before proceeding
    $form.one('submit', function () {
      $.when.apply(null, formSubmitDefs)
      .done(function () {
        if ($form.data('express_checkout') === true) {
        document.location.href = '/cart/checkout';
        } else if ($form.data('submitted_with_ajax') === 1) {
        document.location.href = '/cart?view=shineon';
        } else {
        $form.trigger('submit');
        }
        {% if shop.permanent_domain == 'shineon-platform.myshopify.com' %}
        var quantity = parseInt($form.find('input[name=quantity]').val());
        pintrk('track', 'addtocart', {
          value: quantity,
          currency: '{{ shop.currency }}'
        });
        {% endif %}
      }).fail(function () {
        console.error(arguments);
        $form.trigger('submit');
      });
    });

    /** JS theme fixes/hacks */
    // Single image 'slider'
    if ($('.so-product-images-featured-single').length) {
      $('.so-col-images-thumb-wrap').addClass('so-hidden');
      $('.so-col-images-featured-wrap').removeClass('so-col-10').addClass('so-col-12');
    }

    // long variant names or more than 2 options
    var $options1 = $wrap.find('.so-swatch-picker > div:not(.so-hidden,.so-inactive-metal)'),
        hasOverFlowingElements = false;

    $options1.each(function (k, el) {
      var soLabelSymbolWrap = $(el).find('.so-label-symbol-wrap'),
          isLabelTextLarger = false;
      if (soLabelSymbolWrap.length > 0)
      {
        if (soLabelSymbolWrap.innerWidth() < soLabelSymbolWrap[0].scrollWidth)
        {
          isLabelTextLarger = true;
        }
      }
      if ((el.offsetWidth === 0 && el.innerText.trim().length > 25) || el.offsetWidth < el.scrollWidth|| isLabelTextLarger) {
        hasOverFlowingElements = true;
      }
    });
    if ($options1.length > 2 || hasOverFlowingElements === true) {
      $options1.removeClass(function (index, className) {
        return (className.match(/(^|\s)so-col-\S+/g) || []).join(' ');
      }).addClass('so-col-12 text-overflowed');
    }

    // Lazy load images
    $('img.so-lazy[data-src]').each(function(){
      var $this = $(this);
      $this.prop('src', $this.data('src')).removeAttr('data-src');
    });

    // Some themes have an event listener for all input[type=number]
    // that adds the quantity change buttons +/-
    // hack: dom starts with input type="text", js changes it to type="number"
    $wrap.find('input.so-cart-qty-input').attr('type', 'number');

    // add product object to window
    window.shineon = window.shineon || {};
    window.shineon.product = product;
    };

    initForm();

    // Position buttons fixed after buyer scrolls past them
    if ($(window).width() < 768)
    {
      $(window).on('scroll', function() {
        // #so-bu-information .so-upload-button-wrap, #so-step-buttons, #so-btn-add-to-cart-w
        $('.so-btn-action-fixed')
          .each(function() {
            var $offset = $(this),
              offsetBottom = $offset.offset().top + $offset.outerHeight();

            $('#'+$offset.data('id')).toggleClass('fixed', $(window).scrollTop() >= offsetBottom);
            $('body').css('padding-bottom', $('.so-btn-add-to-cart-wrap.fixed').outerHeight());
          });
      });
    }

    document.addEventListener('shopify:section:load', initForm);

  }(jQuery)); // END initForm = function ()
  });
</script>

{% include 'product-shineon-scripts' with 'modal' %}
